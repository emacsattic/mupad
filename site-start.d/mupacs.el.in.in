;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; $Id$
;; @configure_input@
;; Site emacs initialization file for mupacs
;; This file is created in two passes:
;;  - First pass: mupacs.el.in.in-> mupacs.el.in:
;;    Standard configure substitution
;;  - Second pass: mupacs.el.in -> mupacs.el:
;;    This second pass occurs at installation time (see
;;    install-data-local in the top Makefile.am) to take into account
;;    possible changes to $(prefix). This second pass ensures that
;;    the shell variables are fully substituted.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq mupad-directory "@MUPADdir@")
(setq mupad-el-info "@lispdir@/mupad.el-info")
(setq mupad-run-info "@lispdir@/mupad-run.el-info")
(setq load-path (append load-path (list "@lispdir@")))

(autoload 'mupad-mode "mupad.el" "MuPAD editing mode" t)
(autoload 'mupad-help-mode "mupad-run.el" "MuPAD help mode" t)
(autoload 'mupad-run "mupad-run.el" "To start a MuPAD session" t)
(autoload 'run-mupad "mupad-run.el" "To start a MuPAD session" t)
(autoload 'mupad-run-mode "mupad-run.el" "To start a MuPAD session" t)
(setq auto-mode-alist (cons '("\\.mu$" . mupad-mode) auto-mode-alist))

;mupad-el-info ?
;detect xemacs, and load ... ?

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Definition of missing functions in "old" versions of emacs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; emacs <= 20.7 ?
(if (not (functionp 'mapc))
    (defun mapc (FUNCTION SEQUENCE)
      "Apply FUNCTION to each element of SEQUENCE for side effects only.
Unlike `mapcar', don't accumulate the results.  Return SEQUENCE.
SEQUENCE may be a list, a vector, a bool-vector, or a string.
Slow lisp emulation provided by mupacs for emacsen that miss it as builtin."
      (mapcar FUNCTION SEQUENCE) SEQUENCE))

;; emacs <= 20.7 ?
(if (not (functionp 'bound-and-true-p))
    (defmacro bound-and-true-p (var)
  "Return the value of symbol VAR if it is bound, else nil.
Provided by mupacs for emacsen that miss it."
  `(and (boundp (quote ,var)) ,var)))

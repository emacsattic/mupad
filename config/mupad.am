##############################################################################
# $Id$
# Name:	mupad.am
# Purpose:	Automake / Autoconf macros for MuPAD (www.mupad.de)
# Author:	Nicolas M. Thiéry <nthiery@mines.edu>
# Created:	2000/09
# License:	LGPL
##############################################################################

##############################################################################
# Compilation of MuPAD modules in the framework of the GNU autotools
#
# The source file of the module is named module.mcc. mmg transforms it
# into a real C++ file module.cc. This file is then compiled in the
# standard way by libtool and the c++ compiler into a dynamic module.
##############################################################################

SUFFIXES	= .mcc .mdm
%.cc: %.mcc
	$(MUPAD_MMG) $(MUPAD_MMGFLAGS) $(AM_MUPAD_MMGFLAGS) -gnu -nol -noc -nor -v -V $* $<
	mv -f MMG$*.cpp $@

# Rule to rename the module with the standard MuPAD suffix .mdm, and
# make a copy of it in the modules directory of the toplevel to enable
# using them before the installation (typically in the test suite).
#
# This needs to be seriously improved! In particular, we should
# probably call libtool for the copy, since the .so may have another
# name on another architecture.
#
# Note: we try to use ln instead of cp to save some diskspace.  Using
# ln -s just for %.mdm does not work since it breaks the dependency
# checking, and the module is not copied in $(MUPADlocalmdmdir). One
# should use ln -s for both; this implies (for portability) to run the
# ln -s from $(MUPADlocalmdmdir): some work in perspective
#
# Note: the local module directory used to be created using a separate
# dependency $(MUPADlocalmdmdir). However, this does not work properly
# with VPATHS (if the directory exists in the source tree, it's flaged
# as already created. So we now create it on the fly if it's missing.
#
# Note from Andreas: MuPAD dynamic modules are perfectly standard
# dynamic libraries (unix: .so; windows: .dll), with just some
# specific entry points for the MuPAD kernel.

%.mdm: %.la
	test -d $(MUPADlocalmdmdir) || $(INSTALL) -d $(MUPADlocalmdmdir)
	rm -f $@ $(MUPADlocalmdmdir)/$@
	module=.libs/$*.so;						\
	if [ -f $$module ]; then					\
		ln $$module $@;						\
		ln $$module $(MUPADlocalmdmdir)/$@;			\
	else								\
		cp $$module $@;						\
		cp $$module $(MUPADlocalmdmdir)/$@;			\
	fi;

# does not work if the cleanfile dependency is not generated
#CLEANFILES	+= $(wildcard *.mmg)

##############################################################################
# Minimal test suite for MuPAD
#
# This defines a check-mupad dependency that runs all the MuPAD test
# (.tst suffix) in the source directory
##############################################################################

MUPAD_TEST_FILES   = $(wildcard $(srcdir)/*.tst)
MUPAD_TEST_RESULTS = $(MUPAD_TEST_FILES:$(srcdir)/%.tst=%.res)

# this is ignored by automake
#EXTRA_DIST	   += $(MUPAD_TEST_FILES)
# does not work if the cleanfile dependency is not generated
#CLEANFILES	   += $(MUPAD_TEST_RESULTS)

.phony: FORCE
FORCE:

%.res: $(srcdir)/%.tst FORCE
	@echo Running tests in $< ...
	@echo -e "read(\"$<\"):\nquit:" | $(MUPAD) -S -n -P pe
	@if [ -f $@ -a ! -s $@ ]; then echo PASS; else echo FAIL; test ""; fi

check-mupad: $(MUPAD_TEST_RESULTS)
